class House:
    houses_history = []
    def __new__(cls, *args, **kwargs):
        __instance = super(House, cls).__new__(cls)
        if args and len(args) > 0:
            cls.houses_history.append(args[0])
        return __instance

    def __init__(self, name, number_of_floor):
        self.name = name
        self.number_of_floor = number_of_floor

    def __str__(self):
        return f'Название: {self.name}, количество этажей: {self.number_of_floor}'

    def go_to(self, new_floor):
        if new_floor > self.number_of_floor:
            print('Такого этажа не существует')
        elif new_floor < 1:
            print('Такого этажа не существует')
        else:
            for i in range(1, new_floor+1):
                print(i)

    def __len__(self):
        return self.number_of_floor

    def __eq__(self, other):
        return self.number_of_floor == other.number_of_floor

    def __lt__(self, other):
        return  self.number_of_floor < other.number_of_floor

    def __le__(self, other):
        return self.number_of_floor <= other.number_of_floor

    def __gt__(self, other):
        return self.number_of_floor > other.number_of_floor

    def __ge__(self, other):
       return self.number_of_floor >= other.number_of_floor


    def __ne__(self, other):
        return self.number_of_floor != other.number_of_floor


    def __add__(self, other):
        if isinstance(other, int):
            self.number_of_floor = self.number_of_floor + other
            return self

    def __iadd__(self, other):
        return self.__add__(other)

    def __radd__(self, other):
        return self.__add__(other)

    def __del__(self):
        print(f"{self.name} снесён, но он останется в истории")



h1 = House('ЖК Эльбрус', 10)

print(House.houses_history)

h2 = House('ЖК Акация', 20)

print(House.houses_history)

h3 = House('ЖК Матрёшки', 20)

print(House.houses_history)



# Удаление объектов

del h2

del h3



print(House.houses_history)
